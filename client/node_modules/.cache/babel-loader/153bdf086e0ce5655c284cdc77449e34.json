{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedyasir/Desktop/reactProjects/social media app backend/client/src/components/posts/Posts.jsx\",\n    _s = $RefreshSig$();\n\nimport Post from \"../post/Post\";\nimport \"./posts.scss\";\nimport { makeRequest } from \"../../axios\";\nimport { useQuery } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst posts = [{\n  id: 1,\n  desc: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam. Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam\",\n  name: \"John Doe\",\n  userId: 1,\n  profilePicture: \"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\"\n}, {\n  id: 2,\n  desc: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam\",\n  name: \"Jane Doe\",\n  userId: 2,\n  profilePicture: \"https://images.pexels.com/photos/1036623/pexels-photo-1036623.jpeg?auto=compress&cs=tinysrgb&w=1600\"\n}];\n\nconst Posts = () => {\n  _s();\n\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => (await makeRequest.get(\"/posts\")).data\n  });\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"posts\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Posts, \"P7jBIA24rc00P7RvfXjpVl6dqRI=\", false, function () {\n  return [useQuery];\n});\n\n_c = Posts;\nexport default Posts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Posts\");","map":{"version":3,"sources":["/Users/mohammedyasir/Desktop/reactProjects/social media app backend/client/src/components/posts/Posts.jsx"],"names":["Post","makeRequest","useQuery","posts","id","desc","name","userId","profilePicture","Posts","isLoading","error","data","queryKey","queryFn","get","console","log","map","post"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,cAAjB;AACA,OAAO,cAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SACEC,QADF,QAEO,uBAFP;;AAGA,MAAMC,KAAK,GAAG,CACZ;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,4LAFR;AAGEC,EAAAA,IAAI,EAAE,UAHR;AAIEC,EAAAA,MAAM,EAAE,CAJV;AAKEC,EAAAA,cAAc,EACZ;AANJ,CADY,EASZ;AACEJ,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,IAAI,EAAE,8FAFR;AAGEC,EAAAA,IAAI,EAAE,UAHR;AAIEC,EAAAA,MAAM,EAAE,CAJV;AAKEC,EAAAA,cAAc,EACZ;AANJ,CATY,CAAd;;AAmBA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAA6BV,QAAQ,CAAC;AAC1CW,IAAAA,QAAQ,EAAE,CAAC,OAAD,CADgC;AAE1CC,IAAAA,OAAO,EAAE,YAAa,CAAC,MAAMb,WAAW,CAACc,GAAZ,CAAgB,QAAhB,CAAP,EAAkCH;AAFd,GAAD,CAA3C;AAIAI,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cACJT,KAAK,CAACe,GAAN,CAAUC,IAAI,iBACb,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA;AAAZ,OAAuBA,IAAI,CAACf,EAA5B;AAAA;AAAA;AAAA;AAAA,YADD;AADI;AAAA;AAAA;AAAA;AAAA,UAAP;AAKD,CAdD;;GAAMK,K;UAC+BP,Q;;;KAD/BO,K;AAgBN,eAAeA,KAAf","sourcesContent":["import Post from \"../post/Post\";\nimport \"./posts.scss\";\nimport { makeRequest } from \"../../axios\";\n\nimport {\n  useQuery\n} from '@tanstack/react-query'\nconst posts = [\n  {\n    id: 1,\n    desc: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam. Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam\",\n    name: \"John Doe\",\n    userId: 1,\n    profilePicture:\n      \"https://images.pexels.com/photos/220453/pexels-photo-220453.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\",\n  },\n  {\n    id: 2,\n    desc: \"Lorem ipsum dolor sit amet consectetur adipisicing elit. Autem nequeaspernatur ullam aperiam\",\n    name: \"Jane Doe\",\n    userId: 2,\n    profilePicture:\n      \"https://images.pexels.com/photos/1036623/pexels-photo-1036623.jpeg?auto=compress&cs=tinysrgb&w=1600\",\n  },\n];\n\nconst Posts = () => {\n  const { isLoading, error, data } = useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => ((await makeRequest.get(\"/posts\")).data),\n  });\n  console.log(data);\n\n\n\n  return <div className=\"posts\">\n    {posts.map(post => (\n      <Post post={post} key={post.id} />\n    ))}\n  </div>;\n};\n\nexport default Posts;\n"]},"metadata":{},"sourceType":"module"}