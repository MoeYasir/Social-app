{"ast":null,"code":"var _jsxFileName = \"/Users/mohammedyasir/Desktop/reactProjects/social media app backend/client/src/components/comments/Comments.jsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport \"./comments.scss\";\nimport { AuthContext } from \"../../context/authContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { makeRequest } from \"../../axios.js\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Comments = _ref => {\n  _s();\n\n  let {\n    postId\n  } = _ref;\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    data\n  } = useQuery({\n    queryKey: [\"comments\"],\n    queryFn: async () => (await makeRequest.get(\"/comments?postId=\" + postId)).data\n  });\n  const mutation = useMutation({\n    mutationFn: newPosts => {\n      return makeRequest.post(\"/posts\", newPosts);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['posts']\n      });\n    }\n  });\n\n  const handleClick = async e => {\n    let imgUrl = \"\";\n    if (file) imgUrl = await upload();\n    e.preventDefault();\n    mutation.mutate({\n      desc,\n      img: imgUrl\n    });\n    setDesc(\"\");\n    setFile(null);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comments\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"write\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentUser.profilePic,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"write a comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), isLoading ? \"Loading\" : data.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: comment.profilePicture,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"info\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: comment.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.desc\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"date\",\n        children: moment(comment.createdAt).fromNow()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Comments, \"fVt0Lk9QYnWmUo+WuHGHVQgy0x8=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = Comments;\nexport default Comments;\n\nvar _c;\n\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"sources":["/Users/mohammedyasir/Desktop/reactProjects/social media app backend/client/src/components/comments/Comments.jsx"],"names":["useContext","AuthContext","useQuery","useMutation","useQueryClient","makeRequest","moment","Comments","postId","currentUser","isLoading","error","data","queryKey","queryFn","get","mutation","mutationFn","newPosts","post","onSuccess","queryClient","invalidateQueries","handleClick","e","imgUrl","file","upload","preventDefault","mutate","desc","img","setDesc","setFile","profilePic","map","comment","profilePicture","name","createdAt","fromNow"],"mappings":"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","sourcesContent":["import { useContext } from \"react\";\nimport \"./comments.scss\";\nimport { AuthContext } from \"../../context/authContext\";\nimport {\n  useQuery, useMutation,\n  useQueryClient,\n} from \"@tanstack/react-query\";\nimport { makeRequest } from \"../../axios.js\"\nimport moment from \"moment\";\nconst Comments = ({ postId }) => {\n  const { currentUser } = useContext(AuthContext);\n  const { isLoading, error, data } = useQuery({\n    queryKey: [\"comments\"],\n    queryFn: async () => ((await makeRequest.get(\"/comments?postId=\" + postId)).data),\n  });\n\n  const mutation = useMutation({\n    mutationFn: (newPosts) => {\n\n      return makeRequest.post(\"/posts\", newPosts)\n    },\n    onSuccess: () => {\n\n      queryClient.invalidateQueries({ queryKey: ['posts'] })\n    },\n  });\n  const handleClick = async (e) => {\n    let imgUrl = \"\";\n\n    if (file) imgUrl = await upload();\n    e.preventDefault();\n    mutation.mutate({ desc, img: imgUrl });\n    setDesc(\"\");\n    setFile(null);\n\n  }\n  return (\n    <div className=\"comments\">\n      <div className=\"write\">\n        <img src={currentUser.profilePic} alt=\"\" />\n        <input type=\"text\" placeholder=\"write a comment\" />\n        <button>Send</button>\n      </div>\n\n\n\n      {\n        isLoading ? \"Loading\" :\n          data.map((comment) => (\n            <div className=\"comment\">\n              <img src={comment.profilePicture} alt=\"\" />\n              <div className=\"info\">\n                <span>{comment.name}</span>\n                <p>{comment.desc}</p>\n              </div>\n              <span className=\"date\">{moment(comment.createdAt).fromNow()}</span>\n            </div>\n          ))}\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}